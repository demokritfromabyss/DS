import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from phik import phik_matrix
from sklearn.preprocessing import LabelEncoder

# URL to dataset on GitHub (replace with your actual link)
DATASET_URL = "https://raw.githubusercontent.com/demokritfromabyss/DS/refs/heads/main/streamlit_app/contract_new_streamlit.csv"

@st.cache_data
def load_data(url):
    """Load dataset from GitHub and convert column names to lowercase."""
    try:
        data = pd.read_csv(url)
        data.columns = data.columns.str.lower()  # Convert column names to lowercase
        return data
    except Exception as e:
        st.error(f"Error loading dataset: {e}")
        return None

def main():
    """Main function to run Streamlit app."""
    st.title("Automated Data Preprocessing and EDA App üöÄ")
    st.write("""
        **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã**: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (EDA).
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤.
    """)

    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"):
        # Load dataset
        data = load_data(DATASET_URL)

        if data is not None:
            # Slider for selecting number of rows to process
            row_count = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", min_value=10, max_value=len(data), value=10)
            data = data.iloc[:row_count]  # Process only selected number of rows

            st.write("**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:**")
            st.write(data.head())

            # Column deletion
            st.subheader("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ üóëÔ∏è")
            columns_to_delete = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", data.columns)
            if st.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã"):
                data.drop(columns=columns_to_delete, inplace=True)
                st.success("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —É–¥–∞–ª–µ–Ω—ã.")
                st.write(data.head())

            # Data type conversion
            st.subheader("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö üîÑ")
            selected_columns = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", data.columns)
            target_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö", ["int", "float", "object", "datetime"])

            if st.button("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö"):
                for col in selected_columns:
                    if target_type == "int":
                        data[col] = pd.to_numeric(data[col], errors='coerce').astype('Int64')
                    elif target_type == "float":
                        data[col] = pd.to_numeric(data[col], errors='coerce')
                    elif target_type == "object":
                        data[col] = data[col].astype(str)
                    elif target_type == "datetime":
                        data[col] = pd.to_datetime(data[col], errors='coerce')
                st.success("–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã.")
                st.write(data.head())

            # Visualization
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö üìä")

            if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"):
                st.subheader("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                numeric_columns = data.select_dtypes(include=[np.number]).columns
                for column in numeric_columns:
                    fig, ax = plt.subplots()
                    data[column].hist(bins=20, ax=ax)
                    ax.set_title(f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {column}")
                    ax.set_xlabel(column)
                    ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
                    st.pyplot(fig)

            st.subheader("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            selected_features = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", data.columns)
            plot_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "Boxplot", "Scatter"])
            color = st.color_picker("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞")
            grid = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É")

            if plot_type == "Scatter":
                alpha = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ç–æ—á–µ–∫", 0.0, 1.0, 0.5)

            if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"):
                if plot_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
                    for feature in selected_features:
                        fig, ax = plt.subplots()
                        data[feature].hist(bins=20, ax=ax, color=color)
                        ax.set_title(f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {feature}")
                        ax.set_xlabel(feature)
                        ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
                        if grid:
                            ax.grid(True)
                        st.pyplot(fig)

                elif plot_type == "Boxplot":
                    fig, ax = plt.subplots()
                    sns.boxplot(data=data[selected_features], ax=ax, palette=[color])
                    ax.set_title("Boxplot")
                    if grid:
                        ax.grid(True)
                    st.pyplot(fig)

                elif plot_type == "Scatter":
                    if len(selected_features) == 2:
                        fig, ax = plt.subplots()
                        data.plot.scatter(x=selected_features[0], y=selected_features[1], ax=ax, color=color, alpha=alpha)
                        ax.set_title(f"Scatter plot: {selected_features[0]} vs {selected_features[1]}")
                        ax.set_xlabel(selected_features[0])
                        ax.set_ylabel(selected_features[1])
                        if grid:
                            ax.grid(True)
                        st.pyplot(fig)
                    else:
                        st.error("–î–ª—è scatter-–≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 2 –ø—Ä–∏–∑–Ω–∞–∫–∞.")

            # Correlation matrix
            if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ üîó"):
                st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
                corr_matrix = data.phik_matrix(interval_cols=data.select_dtypes(include=[np.number]).columns)
                fig, ax = plt.subplots(figsize=(10, 8))
                sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", ax=ax)
                ax.set_title("PhiK –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
                st.pyplot(fig)

if __name__ == "__main__":
    main()
